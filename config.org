#+TITLE: Emacs Literate Configuration
#+AUTHOR: yonggang.yyg
#+EMAIL: yygcode@gmail.com
#+DATE: 2017-12-20

* Preamble
** First startup time
When first start, the config installs a number of packages from melpa(or mirror)
and github, which can take a long time depending on the speed of the network.

** Document structure
The structure of this document is described as follows:

- Preamble ::
Document self-structure description and simple error handling.

- Introduction ::
Introduce Emacs, Orgmode and some related materials indexes.

- Header ::
The source file header to satisify the source format of elisp area conventions.

- Profiler ::
Sometimes emacs start slowly, use here methods to analysis.
*IMPORTANT* DO NOT PUT ANY MORE CONFIG ITEM BEFORE PROFILER SECTION.

- Platform ::
Different config for Linux/Windows/Mac.

- Convenient ::
Create a convenient configuration environment like as open config, reload
config, switch to other window.

- Major Mode ::
Major mode configuration. e.g.: orgmode, c-mode, c++-mode, etc.

- Minibuf completion ::
Minibuf narrowing and completion.

- Dictionary ::
English and Chinese online/local dictionary.

- Daemon ::
Daemon Config

- Footer ::
Like as header, it's the footer of source format of elisp area conventions.

- Appendix ::
Supplementary contents.

** Error handling
- Remove package if install some-package failed. e.g. esup package:
  rm ~/.emacs.d/elpa/esup* -fr

- Refresh archive contents manual after start emacs, then restart emacs:
  M-x package-refresh-contents

- Remove elpa directory all, then restart emacs:
  rm ~/.emacs.d/elpa -fr

- Send me a mail to get help: yygcode@gmail.com, cppgp@qq.com

* Introduction
** What is Emacs
*[[https://en.wikipedia.org/wiki/Emacs][Emacs]]* /ˈiːmæks/ is a family of text editors that are characterized by their
extensibility. [[https://www.gnu.org/software/emacs/][GNU Emacs]] is the most popular and portable emacs implementation.

*[[http://orgmode.org/][Org mode]]* is a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html][major mode]] of emacs. It is for keeping notes, capturing ideas,
maintaining TODO lists, planning projects, and authoring documents with a fast
and effective plain-text system. It's also for rich exporting, html publishing,
literal programming, and reproducible research, etc..

This configuration is organzied with org mode literal programming, used to
customize emacs deeply for engineers. The goal is to improve the productivity
and comfort.

This configuration is tested under GNU Emacs 26.0.90, the version details is:
=GNU Emacs 26.0.90 (build 3, x86_64-w64-mingw32) of 2017-10-14=.

Update to 26.1:
=GNU Emacs 26.1 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.22.11) of 2018-10-25=

You can download the configuration from GitHub freely:
#+BEGIN_SRC shell
~$ cd $HOME
~$ git clone https://github.com/yygcode/.emacs.d.git
#+END_SRC

** What is Orgmode and orgmode babel
[[https://orgmode.org/][Org mode]] is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

- Orgmode manual: https://orgmode.org/manual/index.html
- Babel manual: https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code
- Org contrib: https://orgmode.org/worg/org-contrib/babel/

** Reference Configuration
Many execllent configurations are referenced during customization. Follows are
index for typical configurations:
- Purcell: https://github.com/purcell/emacs.d
- Prelude: https://github.com/bbatsov/prelude
- Spacemacs: https://github.com/syl20bnr/spacemacs
- Zilongshanren: https://github.com/zilongshanren/spacemacs-private
- Chenbin: https://github.com/redguardtoo/emacs.d

** Emacs learning material
[[https://github.com/emacs-china/Spacemacs-rocks][Emacs-Rocks]] made by zilongshanren(子龙山人) helped me a lot:
- Space-Rocks: https://github.com/emacs-china/Spacemacs-rocks
- Homepage: https://zilongshanren.com/

I don't agree with some of Chenbin(陈斌)'s views. e.g.: Do Not Learn Lisp.
- https://github.com/redguardtoo/mastering-emacs-in-one-year-guide
- Blog: http://blog.binchen.org/index.html

I read eintr and some part of elisp. These information are very helpful:
- eintr: *An Introduction to Programming in Emacs Lisp*
  + html: https://www.gnu.org/software/emacs/manual/eintr.html
  + pdf: https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf
- mlisp: *GNU Emacs Lisp Reference Manual*
  + html: https://www.gnu.org/software/emacs/manual/html_node/elisp/
  + pdf: https://www.gnu.org/software/emacs/manual/pdf/elisp.pdf
- manual: *GNU Emacs manual*
  + html: https://www.gnu.org/software/emacs/manual/emacs.html
  + pdf: https://www.gnu.org/software/emacs/manual/pdf/emacs.pdf

** Emacs internal material
- =C-h ?= Get help list
- =C-h i= info
- =C-h t= tutorial

** Editor core requirements

* Header
  :PROPERTIES:
  :CUSTOM_ID: header
  :END:

This section has no actual effect, you can remove this section safely. It's just
used to generate some format code snippets to help auto-generated file config.el
satisfing the elisp file format requirement. Refer to follow links:
- CheckDoc: http://cedet.sourceforge.net/checkdoc.shtml
- EmacsWiKi: https://www.emacswiki.org/emacs/ElispAreaConventions
- Manual Simple Packages:
https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Packages.html
#+BEGIN_SRC emacs-lisp
  ;;; ~/.emacs.d/config.el --- Emacs Configuration File

  ;; Copyright (C) 2017-2019 yanyg<yygcode@gmail.com>

  ;; Author: yonggang.yyg<yygcode@gmail.com>
  ;; Maintainer: yonggang.yyg<yygcode@gmail.com>
  ;; Keyword: Emacs Customize Org Literate
  ;; Homepage: https://ycode.org; http://ycode.org
  ;; URL: http://github.com/yygcode/.emacs.d

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 2 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING, if not see
  ;; <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This file is auto-generated with org-babel.  The source is config.org.
  ;; DO NOT modify this file(~/.emacs.d/config.el) directly.
  ;; Please modify source file ~/.emacs.d/config.org.

  ;;; Code:

  ;;; Header timestamp
  (message "%s" (format-time-string "config.el begin %Y-%m-%d %H:%M:%S"
                                    (current-time)))

  ;;; declare variable defined in init.el to eliminate warnings.
  (defvar user-init-config)

  ;; to calculate init seconds
  (defconst y/time-begin-seconds (float-time))
#+END_SRC
* Profiler
** Wrapper function
- y/profile-esup :: profiling by esup
- y/profile-tabulated :: profiling table result
- y/profile-tree :: profiling tree result

Try execute above function for more details.

** esup - startup profiler
[[file:init.el][init.el]] only set package archive and org, then use org-babel load config.org
to complete the rest(vast majority, main part) configurations. [[https://github.com/jschaf/esup][Esup]] provides
=esup-child-profile-require-level= deep to profile require statement, but it
can not deep to profile org-babel file. I write wrapper function =y/esup= to
analyze config.org time proportion.

- Esup GitHub: https://github.com/jschaf/esup
- Emacs Manual Profiling:
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html

#+BEGIN_SRC emacs-lisp
  ;; When call esup function, esup would start a new emacs process
  ;; with option -L/-l to load esup, but until now init.el does not
  ;; loaded, so we need load init.el first.
  (when (and (package-installed-p 'esup)
             (string= (getenv "EMACS_Y_INTERNAL_ESUP_PROFILER") "y/esup"))
    ;; load user-init-file(init.el) if esup profiling enabled.
    (message "y/esup: Esup profiling, load %s now" user-init-file)
    (load-file user-init-file))

  ;; Until now esup has a bug for format-time-string:
  ;; https://github.com/jschaf/esup/issues/47
  ;; https://github.com/jschaf/esup/commit/a589005a9a888537deef94d6fe38a9b8790c97c7
  ;; so use quelpa download the latest one.
  (use-package esup
    :quelpa (esup :fetcher github :repo "jschaf/esup" :stable nil)
    ;; :demand t ;; no delay
    :init
    (setq esup-child-profile-require-level 3)
    (setq esup-user-init-file (expand-file-name "config.el"
                                                user-emacs-directory))
    )

  ;; set env before esup, and clear env after esup
  (advice-add 'esup :before
              #'(lambda(&optional init-file)
                  "y/esup: set env EMACS_Y_INTERNAL_ESUP_PROFILER."
                  (setenv "EMACS_Y_INTERNAL_ESUP_PROFILER" "y/esup")))
  (advice-add 'esup :after
              #'(lambda(&optional init-file)
                  "y/esup: clear env EMACS_Y_INTERNAL_ESUP_PROFILER."
                  (setenv "EMACS_Y_INTERNAL_ESUP_PROFILER" nil)))

  (defalias 'y/profile-esup 'esup
    "Profiling emacs startup time.")
#+END_SRC

** benchmark - profile execution time
*Notice* Import benchmark-init after package esup for esup enhancement.
- GitHub: https://github.com/dholm/benchmark-init-el
- Execute function in emacs to query result
  + benchmark-init/show-durations-tree
  + benchmark-init/show-durations-tabulated
- Default disable data collection after init. Execute to enable or disbale:
  + benchmark-init/activate
  + benchmark-init/deactivate
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :init
    (benchmark-init/activate)
    :hook
    ;; To disable collection of benchmark data after init is done.
    (after-init . benchmark-init/deactivate))

  (defalias 'y/profile-tabulated 'benchmark-init/show-durations-tabulated
    "Profiling emacs startup time. Show result as a table.")
  (defalias 'y/profile-tree 'benchmark-init/show-durations-tree
    "Profiling emacs startup time. Show result as a tree.")
#+END_SRC

* Early Packages
** diminish
Diminish minor modes information displayed on the mode line, saving valuable
mode line space. See https://github.com/emacsmirror/diminish.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :init
    (diminish 'abbrev-mode))
  ;; (require 'diminish)
#+END_SRC


#+BEGIN_SRC emacs-lisp
#+END_SRC

* Platform
** Windows Platform Env and Key-bind
- check PATH environment
- register key I use heavily, which are hold by Windows System default.
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "windows-nt")
    (unless (getenv "HOME")
      (warn "Maybe you forgot to set environment variable HOME."))

    ;; M-w: paste, bind to kill-ring-save
    (w32-register-hot-key [M-w])
    ;; C-M-n: sp-up-sexp
    (w32-register-hot-key [C-M-n]))
#+END_SRC

** Mac
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :quelpa (exec-path-from-shell :fetcher github
                                    :repo "purcell/exec-path-from-shell"
                                    :stable t)
      :demand t
      :init
      (exec-path-from-shell-initialize)))

  ;; Copy from https://github.com/bbatsov/prelude/blob/master/core/prelude-macos.el
  (defun y/swap-meta-and-super()
    "Swap the mapping of Meta and Super.
  Very useful for people using their Mac with a
  Windows external keyboard from time to time."
    (interactive)
    (if (eq mac-command-modifier 'super)
        (progn
          (setq mac-command-modifier 'meta)
          (setq mac-option-modifier 'super)
          (message "Command is now bound to META and Option is bound to SUPER."))
      (setq mac-command-modifier 'super)
      (setq mac-option-modifier 'meta)
      (message "Command is now bound to SUPER and Option is bound to META.")))

  ;; m for mac, s for swap
  (define-key global-map (kbd "C-c m s") 'y/swap-meta-and-super)

  ;; default swap for mac
  ;; (when (string= system-type "darwin")
  ;;  (y/swap-meta-and-super))
#+END_SRC

* Convenient
** behavior
- Always use y-or-n replace yes-or-no so you just need input y/n.
- Do not backup files.
- Always use space replace tab
- Replace selection text after input
- Adjust large file warning threshold to 256MB
- Show line number for prog and text mode
- save buffer
- desktop for linux/mac (disable Windows for startup very slowly)

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq-default make-backup-files nil)
  (setq-default indent-tabs-mode nil)

  (setq kill-ring-max 500
        kill-whole-line t)
  (setq confirm-kill-processes nil)

  (global-set-key (kbd "RET") 'newline-and-indent)

  (delete-selection-mode t)
  (setq large-file-warning-threshold (* 256 1024 1024)) ;; 256MB
  (setq default-directory "~/")

  (when (not (string= system-type "winows-nt"))
    (desktop-save-mode))

  (use-package linum
    :config
    ;; set linum face for bug that text-scale-increase/decrease
    ;; see https://unix.stackexchange.com/a/146781
    (set-face-attribute 'linum nil :height 90)
    :hook
    (text-mode . linum-mode)
    (prog-mode . linum-mode))
#+END_SRC

** calendar
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :init
    (setq calendar-week-start-day 1)
    :bind
    ("C-= i" . calendar))
#+END_SRC

** company
company is a text completion framework. It means COMplete ANYthing.
Gitub https://github.com/company-mode/company-mode.

The company configuration varies greatly for different major modes, and when
use emacs, company config will always be adjusted or optimized. So the total
configurations are complex and huge. If still use orgmode babel to maintain
company config, the config will be scattered everywhere. Therefore, I put all
company config in a special file y-init-company.el to enhance maintenance.

Material:
- Manual: https://company-mode.github.io/

#+BEGIN_SRC emacs-lisp
  (require 'y-init-company)
#+END_SRC

** eldoc
eldoc provides a minor mode to display of Lisp objects at point in echo area.
#+BEGIN_SRC emacs-lisp
  ;; builtin
  (require 'eldoc)
  (diminish 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
#+END_SRC

** flycheck
Flycheck is a modern on-the-fly syntax checking package. Homepage is
https://www.flycheck.org/en/latest/.

Flycheck use external specific system tool to check syntax. See
https://www.flycheck.org/en/latest/languages.html#flycheck-languages,
so need properly exec-path to search it. Install package exec-path-from-shell
for mac compatiblity: https://github.com/purcell/exec-path-from-shell.

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :init
      (exec-path-from-shell-initialize)))
#+END_SRC

Futher help:
- =C-h f exec-path-from-shell-initialize=
- =C-h f exec-path-from-shell-copy-env=

Install flycheck and just config for elisp here. Reconfigure flycheck when
configuring a development environment such as C/C++.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish
    :init
    (setq flycheck-emacs-lisp-load-path 'inherit)
    :config
    (add-to-list 'flycheck-clang-warnings "no-pragma-once-outside-header")
    :hook
    (after-init . global-flycheck-mode))
#+END_SRC

Read https://www.flycheck.org/en/latest/languages.html#emacs-lisp to get more
details.

Install flycheck-color-mode to enhance display.
Github https://github.com/flycheck/flycheck-color-mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-color-mode-line
    :hook
    (flycheck-mode . flycheck-color-mode-line-mode))
#+END_SRC

flycheck-pos-tip is a useful minor mode. Github
https://github.com/flycheck/flycheck-pos-tip.

Disable pos-tip for performance
#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck-pos-tip
  ;;   :config
  ;;   (setq flycheck-pos-tip-timeout 120) ;; 2 mins
  ;;   :hook
  ;;   (flycheck-mode . flycheck-pos-tip-mode))
#+END_SRC

** helpful
*Helpful* is an alternative to the built-in Emacs help that provides much more
contextual information.

#+BEGIN_SRC emacs-lisp
  (use-package helpful)
#+END_SRC

** hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish
    :hook
    (after-init . global-hungry-delete-mode))
#+END_SRC

** info
#+BEGIN_SRC emacs-lisp
  (use-package info
    :bind
    ("C-h C-a" . info-apropos))

  (use-package info-colors
    :after info
    :hook
    (Info-selection . info-colors-fontify-node))
#+END_SRC

** key binding
In the entire configuration enhancement, we need to frequently switch to scratch
to debug some lisp sentences and switch to config file init.el/config.org. Now
define 3 convenient key binding. Again, I use key-prefix "C-c q" for quick-.

#+BEGIN_SRC emacs-lisp
  (defun y/switch-buffer-scratch()
    "Switch buffer to *scartch*."
    (interactive)
    (switch-to-buffer "*scratch*"))
  (defun y/switch-buffer-init()
    "Switch buffer to user-init-file(default init.el)."
    (interactive)
    (find-file user-init-file))
  (defun y/switch-buffer-config()
    "Switch buffer to user-init-config(default config.org)."
    (interactive)
    (find-file user-init-config))

  (defun y/kill-help()
    "Change to other window then quit-window."
    (interactive)
    (save-excursion
      (and (switch-to-buffer "*Help*")
           (kill-buffer))))

  (define-key global-map (kbd "C-c q s") #'y/switch-buffer-scratch)
  (define-key global-map (kbd "C-c q i") #'y/switch-buffer-init)
  (define-key global-map (kbd "C-c q c") #'y/switch-buffer-config)
  (define-key global-map (kbd "C-o") #'other-window)
  (define-key global-map (kbd "C-= c") #'describe-char)
  (define-key global-map (kbd "C-= v") #'describe-variable)
  (define-key global-map (kbd "C-h q") #'y/kill-help)
  (define-key global-map (kbd "M-,") #'pop-tag-mark)
#+END_SRC

** mouse
Disable mouse. I use keyboard.
#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :diminish
    :hook
    (prog-mode . disable-mouse-mode)
    (text-mode . disable-mouse-mode))
#+END_SRC

** proced
Generate a listing of UNIX system processes.

#+BEGIN_SRC emacs-lisp
  (use-package proced
    :init
    (setq-default proced-auto-update-interval 1
                  proced-filter 'all)
    :bind
    ("C-= p" . proced)
    :hook
    (proced-mode . (lambda()(proced-toggle-auto-update 1))))
#+END_SRC

** smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.
- Github: https://github.com/Fuco1/smartparens
- Blog: https://ebzzry.io/en/emacs-pairs/
- Wiki: https://github.com/Fuco1/smartparens/wiki
- ref [[https://ebzzry.io/en/emacs-pairs/][emacs-pairs]], [[https://github.com/Fuco1/smartparens][smartparens github]], and [[https://github.com/Fuco1/smartparens/wiki][wiki]]

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish
    :config
    (require 'smartparens-config)
    (setq sp-base-key-bindings 'paredit)
    (setq sp-autoskip-closing-pair 'always)
    (setq sp-hybrid-kill-entire-symbol nil)
    (sp-use-paredit-bindings)
    (show-smartparens-global-mode t)
    ;; use eval-when-compile or with-eval-after-load can eliminate warning:
    ;; ‘sp-local-pair’ might not be defined at runtime
    ;; But when start daemon cause a new error:
    ;;  Eager macro-expansion failure: (void-function sp-local-pair)
    (sp-local-pair 'lisp-mode "'" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-mode "`" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "`" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "`" nil :actions nil)
    :hook
    (after-init . smartparens-global-mode)
    (after-init . show-smartparens-global-mode)
    (prog-mode . turn-on-smartparens-strict-mode))
#+END_SRC

** ui
*** basic
Set menu, scroll, fullscreen, cursor and column-number.
Customize user interface
#+BEGIN_SRC emacs-lisp
  (setq-default
   inhibit-splash-screen t
   initial-scratch-message
   (concat
    ";; This buffer is for text that is not saved, and for Lisp evaluation.\n"
    ";; To create a file, visit it with C-x C-f and enter text in its buffer.\n\n"
    ";; Happy hacking " (or user-login-name "<yanyg>") " - Emacs loves you!\n\n"))

  (defun y/frame-init-ui-basic(&optional frame)
    "Init FRAME user-interface after created."
    (with-selected-frame frame
      ;; Hide menu, tool, scroll bar, auto fullscreen for X
      (menu-bar-mode -1)
      (when (display-graphic-p)
        (set-frame-parameter nil 'fullscreen 'fullboth)
        (scroll-bar-mode -1))
      (when (fboundp 'tool-bar-mode)
        (tool-bar-mode -1))
      ;; cursor: bar with width 3, OrangeRed color, Steady mode
      (if (display-graphic-p)
          (progn
            (setq-default cursor-type '(bar . 3))
            (blink-cursor-mode -1)
            (set-cursor-color "OrangeRed"))
        (progn
          ;; Only support xterm.
          ;; FIXME: restore after exit.
          ;; need terminal support. 6 for steady bar
          ;; \e: ESC; \a: BELL; man ascii for more details.
          (send-string-to-terminal "\e[6 q\e]12;DarkOrange1\a")))

      ;; disable bell
      (setq visible-bell nil)
      (setq ring-bell-function 'ignore)

      ;; show column and size in the mode line
      (column-number-mode)
      (size-indication-mode t)))

  ;; daemon hook, exec after emacsclient created
  (add-hook 'after-make-frame-functions #'y/frame-init-ui-basic)

  ;; non-daemon hook
  (unless (daemonp)
    (add-hook 'after-init-hook
              #'(lambda() (y/frame-init-ui-basic (selected-frame)))))
#+END_SRC

*** modeline
WIKI: https://www.emacswiki.org/emacs/ModeLineConfiguration

Smart Mode Line:
Github: https://github.com/Malabarba/smart-mode-line

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            #'(lambda()
                (setq display-time-default-load-average nil
                       display-time-format "%k:%M %a" ;; remove %b %d
                       display-time-mode t)
                 (display-time)
                 ))
#+END_SRC

Smart mode line. Try sml/apply-theme if want more.
Regexp example:
#+BEGIN_SRC text
  (add-to-list 'sml/replacer-regexp-list '("^~/Git-Projects/" ":Git:") t)
  (add-to-list 'sml/replacer-regexp-list '("^:Git:\(.*\)/src/main/java/" ":G/\1/SMJ:") t)
  (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":DBox:"))
  (add-to-list 'sml/replacer-regexp-list
               '("^~/Projects/\\(\\w+\\)/"
                 (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))
               t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :init
    (setq sml/col-number-format "%02c"
          sml/name-width 15
          sml/no-confirm-load-theme t
          sml/theme 'dark) ;; others: light, respectful
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '(".*/archive" ":AR:"))
    (add-to-list 'sml/replacer-regexp-list '(".**/archiveserver" ":AS:")))
#+END_SRC

** font
elisp Chapter 39 section 39.12 describes more technology about faces. Read it
for more details:
- 39.12.9 Font Selection ::
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Selection.html#Font-Selection
- 39.12.11 Fontsets ::
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#Fontsets
- 39.12.12 Low-Level Font Representation ::
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#Low_002dLevel-Font

Font depends on specific platform (Linux/Mac/Windows). Here according to
different platform to set beautiful/properly font as much as possible.

- Monospace: Code always use monospace font. See wiki ::
  https://en.wikipedia.org/wiki/List_of_monospaced_typefaces

Set different font for different major mode. See
https://emacs.stackexchange.com/a/3044.

#+BEGIN_SRC emacs-lisp
  (defconst y/font-mono-size-x 15
    "Monospace font size under graphic.")

  (defconst y/font-mono-size-c 15
    "Monospace font size under console.")

  (defconst y/font-mono-name-list-default
    `(("Source Code Variable" . ,y/font-mono-size-x)
      ("Source Code Pro" . ,y/font-mono-size-x)
      ("PragmataPro" . ,y/font-mono-size-x)
      ("ProFont" . ,y/font-mono-size-x)
      ("Lucida Sans" . ,y/font-mono-size-x)
      ("Courier New" . ,y/font-mono-size-x)
      ("Consolas" . ,y/font-mono-size-x)
      ("DejaVu Sans Mono" . ,y/font-mono-size-x)
      ("FreeMono" . ,y/font-mono-size-x)
      ("Liberation Mono" . ,y/font-mono-size-x))
    "Monospace font name assoc default value.")

  (defconst y/font-monocjk-size-x 15
    "MonospaceCJK font size under graphic.")

  (defconst y/font-monocjk-size-c 15
    "MonospaceCJK font size under console.")

  (defconst y/font-monocjk-name-list-default
    `(("Microsoft YaHei UI" . ,y/font-monocjk-size-x)
      ("Microsoft YaHei" . ,y/font-monocjk-size-x)
      ("FangSong" . ,y/font-monocjk-size-x)
      ("SimSun" . ,y/font-monocjk-size-x)
      ("AR PL SungtiL GB" . ,y/font-monocjk-size-x)
      ("AR PL Mingti2L Big5" . ,y/font-monocjk-size-x))
    "MonospaceCJK font name assoc default value.")

  (defvar y/font-mono-name-list-x nil
    "Monospace font candidates under graphic. Format is ((name . size) ...).")
  (defvar y/font-mono-name-list-c nil
    "Monospace font candidates under console. Format is ((name . size) ...).")

  (defvar y/font-monocjk-name-list-x nil
    "MonospaceCJK font candidates under graphic. Format is ((name . size) ...).")
  (defvar y/font-monocjk-name-list-c nil
    "MonospaceCJK font candidates under console. Format is ((name . size) ...).")

  ;; Customize the name list to satisfy your taste.
  (cond ((string= system-type "gnu/linux")  ;; Linux
         (setq y/font-mono-name-list-x y/font-mono-name-list-default
               y/font-mono-name-list-c y/font-mono-name-list-default)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default))
        ((string= system-type "darwin")     ;; Mac prepend ?
         (setq y/font-mono-name-list-x
               (cons `("Apple Color Emoji" . ,y/font-mono-size-x)
                     y/font-mono-name-list-default))
         (setq y/font-mono-name-list-c y/font-mono-name-list-x)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default))
        ((string= system-type "windows-nt") ;; Windows
         (setq y/font-mono-name-list-x y/font-mono-name-list-default
               y/font-mono-name-list-c y/font-mono-name-list-default)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default))
        (t
         (setq y/font-mono-name-list-x y/font-mono-name-list-default
               y/font-mono-name-list-c y/font-mono-name-list-default)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default)))

  (defun y/font-is-exist(namesize)
    "Check font exist or not. The font property :name is NAME."
    (if (and (stringp (car namesize))
             (integerp (cdr namesize))
             (find-font (font-spec :name (car namesize)
                                   :size (cdr namesize))))
        t
      nil))

  (defun y/font-set-frame-font-if-exist(frame charset namesize &optional fontset)
    "For FRAME, Set CHARSET's font to NAMESIZE if that font exists. If FONTSET
  is non-nil, then call set-fontset-font set default font."
    (if (y/font-is-exist namesize)
        (progn
          ;; (message "Set Font Frame(%s) Charset(%s) to %s" frame charset namesize)
          (if fontset
              (set-frame-font (font-spec :name (car namesize)
                                         :size (cdr namesize)) nil nil)
            (set-fontset-font nil charset (font-spec :name (car namesize)
                                                     :size (cdr namesize))
                              frame))
          t)
      nil))

  (defun y/font-set-frame-try-list(frame charset namesizeassoc &optional fontset)
    "For FRAME, from front to back in NAMESIZEASSOC, try to set CHARSET's font."
    (let ((r nil))
      (dolist (namesize namesizeassoc)
        (unless r
          (and (y/font-set-frame-font-if-exist
                frame charset namesize fontset)
               (setq r t))))))

  (defun y/font-set-frame-font-by-display
      (frame charset namesizeassocx namesizeassocc &optional fontset)
    "For FRAME, from front to back in namesizeassoc, try to set CHARSET's font.
  If frame run in graphic, use NAMESIZEASSOCX, otherwise use NAMESIZEASSOCC"
    (if (display-graphic-p)
        (y/font-set-frame-try-list frame charset namesizeassocx fontset)
      (y/font-set-frame-try-list frame charset namesizeassocc fontset)))

  (defun y/font-set(&optional frame)
    "For FRAME set properly font."
    (with-selected-frame frame
        (y/font-set-frame-font-by-display
         frame nil y/font-mono-name-list-x y/font-mono-name-list-c t)
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (y/font-set-frame-font-by-display
           frame charset y/font-monocjk-name-list-x y/font-monocjk-name-list-c))))

  ;; daemon hook, exec after emacsclient created
  ;; (add-hook 'after-make-frame-functions #'y/font-set)

  ;; non-daemon hook
  ;; (unless (daemonp)
  ;;  (add-hook 'after-init-hook
  ;;            #'(lambda() (y/font-set (selected-frame)))))
#+END_SRC

** theme
Theme is another important ui aspect. Manual
https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html,
https://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html
and wiki https://www.emacswiki.org/emacs/CustomThemes introduce some theme
knowledge.

Emacsthemes(https://emacsthemes.com/) and
Emacs Theme Gallary(https://pawelbx.github.io/emacs-theme-gallery/) lists
typical emacs theme.

Theme will gradually increase as time goes, put all liked theme package here
and select zenburn as default.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme)
  (use-package monokai-theme)
  (use-package solarized-theme)

  (load-theme 'zenburn t)
#+END_SRC

** TODO whitespace visualization
whitespace render a space, tabs, newlines to a visible glyph.
- Github: https://github.com/emacs-mirror/emacs/blob/master/lisp/whitespace.el
- builtin lisp, see [[https://github.com/emacs-mirror/emacs/blob/master/lisp/whitespace.el][GitHub whitespace.el]]
- WIKI: https://www.emacswiki.org/emacs/WhiteSpace
- Ergoemacs: http://ergoemacs.org/emacs/whitespace-mode.html

TODO LIST:
1. For linux style do not show tab before space;
2. change color after theme changed;

#+BEGIN_SRC emacs-lisp
  (defun y/whitespace-color(&optional theme)
    "Set whitespace color depends on current theme THEME."
    (custom-set-faces
     '(whitespace-newline ((t (:foreground "#75715E"))))
     ;; '(whitespace-newline ((t (:foreground "#424242"))))
     '(whitespace-tab ((t (:foreground "#75715E"))))
     '(whitespace-space ((t (:foreground "#75715E" :background nil))))))

  (use-package whitespace
    :diminish
    :config
    (progn
      (setq whitespace-line-column 80) ;; limit line length
      (setq whitespace-style '(face trailing spaces tabs lines-tail newline
                                    space-before-tab space-before-tab::tab
                                    space-before-tab::space space-after-tab::tab
                                    space-after-tab::space space-after-tab
                                    newline-mark space-mark tab-mark))
      (setq whitespace-display-mappings
            '((space-mark 32 [183] [46])
              (newline-mark 10 [182 10])
              ;; (tab-mark 9 [?. 9] [92 9])
              (tab-mark   ?\t   [?\xBB ?\t] [?\\ ?\t])))
      (y/whitespace-color))
    :hook
    ;; (c-mode-common . (lambda()
    ;;                    "Enable whitespace-mode."
    ;;                    ;; Whitespace remove tabs-before-space for c-Linux.
    ;;                    (when (and (string= major-mode "c-mode")
    ;;                               (string= c-indentation-style "y/c-linux"))
    ;;                      (make-local-variable 'whitespace-style)
    ;;                      (setq whitespace-style
    ;;                            (remove 'tabs whitespace-style))
    ;;                      (setq whitespace-style
    ;;                            (remove 'space-after-tab::tab whitespace-style)))
    ;;                    (whitespace-mode 1)))
    (prog-mode . whitespace-mode)
    (text-mode . whitespace-mode)
    (before-save . whitespace-cleanup))

  ;; theme has no hook. use advice.
#+END_SRC

* Major mode
** common packages
*** highlight-symbol
- Homepage: [[https://github.com/nschum/highlight-symbol.el][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :diminish highlight-symbol-mode
    :init
    ;; The original func always print ugly string '<N> occurrences in buffer'
    ;; Replace with dummy empty function
    (setq highlight-symbol-occurrence-message nil)
    (advice-add 'highlight-symbol-count :override #'(lambda() nil))
    ;; (defun highlight-symbol-count (&optional symbol) (t))
    :config
    (setq highlight-symbol-idle-delay .1)
    :bind
    (([f8] . highlight-symbol-at-point)
     ([S-f8] . highlight-regexp))
    :hook
    (prog-mode . highlight-symbol-mode))
#+END_SRC
*** highlight surrounding parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :diminish highlight-parentheses-mode
    :init
    (add-hook 'prog-mode-hook 'highlight-parentheses-mode))
#+END_SRC


*** iedit
- Homepage: [[https://github.com/victorhge/iedit][Github Iedit]]
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :bind
    (("C-c ;" . iedit-mode)))
#+END_SRC

*** stickfunc
- HomePage: [[https://github.com/tuhdo/semantic-stickyfunc-enhance#features][GitHub StickFunc Enhance]]
#+BEGIN_SRC emacs-lisp
  (use-package stickyfunc-enhance
    :pin melpa
    :diminish)
#+END_SRC

*** yasnippet
*YASnippet* is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates. Bundled
language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX,
HTML, CSS and more.

- Github: https://github.com/joaotavora/yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+END_SRC

** c mode
*** style
Use c-guess-no-install and c-guess-view to generate style template.
Read variable c-offsets-alist for more details.

#+BEGIN_SRC emacs-lisp
  (defconst y/c-style-basic
    '((c-tab-always-indent . nil)
      (c-basic-offset . 4)
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . +)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . +)
       (inmodule . +)
       (innamespace . +)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 0)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro .
                          [0])
       (statement-case-intro . +)
       (statement-case-open . 0)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont . c-lineup-topmost-intro-cont)))
    "y/c-basic")
  (c-add-style "y/c-basic" y/c-style-basic)

  (defconst y/c-style-linux
    '((c-tab-always-indent . nil) ; manualy added
      (c-basic-offset . 8)     ; Guessed value
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . c-lineup-arglist-intro-after-paren)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . 0)
       (inmodule . +)
       (innamespace . +)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 5)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro . [0])
       (statement-case-intro . +)
       (statement-case-open . +)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont first c-lineup-topmost-intro-cont c-lineup-gnu-DEFUN-intro-cont)))
    "y/c-linux")
  (c-add-style "y/c-linux" y/c-style-linux)

  (defconst y/c-style-alibaba
    '((c-tab-always-indent . nil) ; manualy added
      (c-basic-offset . 4)     ; Guessed value
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . +)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . +)
       (inmodule . +)
       (innamespace . 0)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 0)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro .
                          [0])
       (statement-case-intro . +)
       (statement-case-open . 0)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont . c-lineup-topmost-intro-cont)))
    "y/c-alibaba")
  (c-add-style "y/c-alibaba" y/c-style-alibaba)

  (defun y/c-style-hook()
    "Config c/c++ style depends on file pathname"
    (when (buffer-file-name)
      (cond ((or (string-match "/pangu/" (buffer-file-name))
                 (string-match "/apsara/" (buffer-file-name))
                 (string-match "/stone/" (buffer-file-name)))
             (c-set-style "y/c-alibaba"))
            ((or (string-match "/linux.*/" (buffer-file-name)))
             (c-set-style "y/c-linux")
             ;; Linux use real tab. Auto buffer-local.
             (setq indent-tabs-mode t))
            (t ;; all default to y/c-basic
             (c-set-style "y/c-basic")))))
  (add-hook 'c-mode-common-hook 'y/c-style-hook)
#+END_SRC

*** completion
See [[file:lisp/y-init-company.el][y-init-company.el]].

*** function-args
GNU Emacs package for showing an inline arguments hint for the C/C++ function at point
- Github: https://github.com/abo-abo/function-args

*** speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :init
    (setq sr-speedbar-auto-refresh t
          speedbar-use-images nil
          sr-speedbar-width-x 10
          sr-speedbar-max-width 20)
    :bind
    ("C-c w b" . sr-speedbar-toggle))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :config
    (fa-config-default))
#+END_SRC

** log view
Here is an extend template. Company Specialized config dispath to private
config.

- Github: https://github.com/doublep/logview
#+BEGIN_SRC emacs-lisp
  (use-package logview
    :init
    (setq logview-additional-submodes
          '(("ycode-log-submode"
             (format . "[TIMESTAMP] [LEVEL] [THREAD]")
             (levels . "ycode-log-level")
             ;; define timestamp if not one of standard
             ;; (timestamp . "yyyy-MM-dd HH:mm:ss.UUUUUU")
             (aliases "ycode-log"))))

    (setq logview-additional-level-mappings
          '(("ycode-log-level"
             (error "ERROR" "FATAL")
             (warning "WARNING")
             (information "INFO")
             (debug "DEBUG")
             (trace "TRACE")))))
#+END_SRC

** semantic
- Manual: https://www.gnu.org/software/emacs/manual/html_mono/semantic.html
- Speedbar: https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Speedbar

** c++ mode
*modern-cpp-font-lock* Syntax highlighting support for "Modern C++" - until
C++20 and Technical Specification.

- Github: https://github.com/ludwigpacifici/modern-cpp-font-lock
- Wiki: https://github.com/ludwigpacifici/modern-cpp-font-lock/wiki

#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :diminish modern-c++-font-lock-mode
    :hook
    (c++-mode . modern-c++-font-lock-mode))
#+END_SRC

** orgmode
Org mode is a great GTD tool.
- Homepage: https://orgmode.org/
- Community: https://orgmode.org/worg/index.html

*** directory and key binding
- Homepage: [[http://orgmode.org/]]
- My org layout:
#+BEGIN_SRC text
  org             <-- The root of org
  ├── notes.org   <-- captures
  ├── h           <-- Homepage
  ├── i           <-- work(inspur)
  ├── a           <-- work(alibaba)
  ├── p           <-- personal/private data
  └── misc        <-- All others
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :diminish org
    :init
    (progn
      (setq org-support-shift-select t)
      (setq org-src-fontify-natively t))
    :config
    (progn
      (setq org-directory "~/org")
      (setq org-agenda-files (list org-directory
                                   (concat org-directory "/a")
                                   (concat org-directory "/p")))
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq system-time-locale "C")
      (setq org-display-custom-times t)
      (setq org-time-stamp-custom-formats
            '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")))
    :bind
    (("C-c c" . org-capture)
     ("C-c a" . org-agenda)
     ("C-o" . other-window))
    :mode
    ("\\.org\\'" . org-mode))

  ;; disable org-src flycheck
  (use-package org-src
    :ensure org-plus-contrib
    :diminish
    :hook
    (org-src-mode . (lambda() (flycheck-mode -1))))
#+END_SRC

*** bullets
- Homepage: [[https://github.com/sabof/org-bullets][GitHub Org Bullets]]
- FIXME: Win7 Ultimate CN version can not show heading bullets low than level 3
#+BEGIN_SRC emacs-lisp
  (when (find-font (font-spec :name "Source Code Variable" :size 15))
    (use-package org-bullets
      :init
      (add-hook 'org-mode-hook
                (lambda()(org-bullets-mode 1)))))
#+END_SRC

*** pomodoro
- https://github.com/lolownia/org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :pin melpa
    :init
    (setq org-pomodoro-length 30))
#+END_SRC

** eshell
*Eshell* is a shell-like command interpreter implemented in Emacs Lisp.
- https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
- Manual: https://www.gnu.org/software/emacs/manual/html_mono/eshell.html
- Mastering eshell: https://www.masteringemacs.org/article/complete-guide-mastering-eshell

#+BEGIN_SRC emacs-lisp
  (defun y/eshell-clear()
    "Clear Screen for Eshell mode."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input))
    ;; recenter-top-bottom will reposition to previous pos when input
    ;; (recenter-top-bottom 1)
    )

  (defun y/eshell-hook()
    "Config Eshell Mode."
    ;;
    (define-key eshell-mode-map (kbd "C-c") #'eshell-interrupt-process)
    (define-key eshell-mode-map (kbd "C-d") #'eshell-send-eof-to-process)
    (define-key eshell-mode-map (kbd "C-l") #'y/eshell-clear))

  (use-package eshell
    :demand t
    :init
    (setq eshell-scroll-to-bottom-on-input 'all)
    ;; Eshell has a bug about eshell-mode-map, use hook function to bind key.
    ;; :bind
    ;; (:map eshell-mode-map
    ;;    ("C-c" . eshell-interrupt-process))
    :hook
    (eshell-mode . y/eshell-hook))
#+END_SRC

* Minor mode
** abbrev
Abbreviations expands package. Builtin.

- Manual: https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html#Abbrevs
- Wiki: https://www.emacswiki.org/emacs/AbbrevMode
- Ergo: http://ergoemacs.org/emacs/emacs_abbrev_mode_tutorial.html

#+BEGIN_SRC emacs-lisp
  (require 'abbrev)
  (setq abbrev-file-name (locate-user-emacs-file ".abbrev.data"))
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)
#+END_SRC

** tags
*xref* used to find definitions and references of any function, method,
struct, macro,. Builtin.

*ggtags* and *counsel-gtags* are global wrapper.

Put all in y-init-tags.el

- Manual: https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html#Xref
- ggtags github: https://github.com/leoliu/ggtags
- counsel-gtags github: https://github.com/syohex/emacs-counsel-gtags

#+BEGIN_SRC emacs-lisp
  (require 'y-init-tags)
#+END_SRC

* Minibuf
** amx
Alternative M-x with extra features.
#+BEGIN_SRC emacs-lisp
  (use-package amx)
#+END_SRC

** helm
*Helm* is an Emacs framework for incremental completions and narrowing
selections.

- Github: https://github.com/emacs-helm/helm
- WIKI: https://github.com/emacs-helm/helm/wiki

#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :diminish
    :ensure helm
    :config
    ;; always use english input in helm minibuffer
    ;; use C-\ (toggle-input-method) to toggle to other(e.g. pyim)
    (helm-set-local-variable 'current-input-method nil)
    :bind
    ;;("C-x C-f" . helm-find-files)
    ("M-x" . helm-M-x)
    ("C-x b" . helm-mini))
#+END_SRC

** swiper
*Swiper* is a flexible, simple tools for minibuffer completion in Emacs.
- Github: https://github.com/abo-abo/swiper
- Manual: http://oremacs.com/swiper/
- WIKI: https://github.com/abo-abo/swiper/wiki

#+BEGIN_SRC emacs-lisp
  ;; short bindings with a common prefix
  ;; https://github.com/abo-abo/hydra
  (use-package hydra
    :demand t) ;; used by ivy
  (use-package ivy
    ;; archive version ivy-0.10 lost counsel.el, use github replaced
    :quelpa (ivy :fetcher github
                 :repo "abo-abo/swiper"
                 :stable nil)
    :diminish
    :after hydra ;; swiper internal use, compile error if absent
    :init
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d > ")
    (setq counsel-find-file-ignore-regexp
          (concat
           ;; filename begins with #
           "\\(?:\\`[#.]\\)"
           ;; filename ends with # or ~
           "\\|\\(?:\\`.+?[#~]\\'\\)"
           ))
    :bind
    ("C-s"     . swiper)
    ("C-x C-f" . counsel-find-file)
    ("C-h f"   . counsel-describe-function)
    ("C-h v"   . counsel-describe-variable)
    ("C-c g f" . counsel-git)
    ("C-c g g" . counsel-git-grep)
    ("C-c g l" . counsel-git-log)
    ("C-c k"   . counsel-ag)
    :hook
    (after-init . ivy-mode))
#+END_SRC

* Text process
** coding system
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (when (string-equal current-language-environment "Chinese-GBK")
    ;; Do not use utf-8-unix . chinese-gbk-dos for
    ;; the set will cause ggtags failure
    (setq default-process-coding-system '(utf-8 . chinese-gbk)))
#+END_SRC
** undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :pin gnu
    :diminish
    :hook
    (after-init . global-undo-tree-mode))
#+END_SRC
** visual regexp
visual-regexp for Emacs is like replace-regexp, but with live visual
feedback directly in the buffer.
- Github: https://github.com/benma/visual-regexp.el
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :bind
    ("C-c v r" . vr/replace)
    ("C-c v q" . vr/query-replace))
#+END_SRC
** wgrep
Writable grep buffer and apply the changes to files
#+BEGIN_SRC emacs-lisp
  (use-package wgrep)
#+END_SRC

** wgrep-ag
#+BEGIN_SRC emacs-lisp
  (use-package wgrep-ag)
#+END_SRC

* Dictionary
** youdao
- Homepage: [[https://github.com/xuchunyang/youdao-dictionary.el][GitHub Youdao]]
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary
    :init
    (setq url-automatic-caching t)
    :bind
    (("C-c y t" . youdao-dictionary-search-at-point)
     ("C-c y s" . youdao-dictionary-play-voice-at-point)))
#+END_SRC

* Search Engineer
** google
- google this package: [[https://github.com/Malabarba/emacs-google-this][Emacs Google This]]
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :diminish
    :bind-keymap ("C-c s g" . google-this-mode-submap)
    :hook
    (after-init . google-this-mode))
#+END_SRC

* Browser
** emacs-w3m
- emacs-w3m: [[https://github.com/ecbrown/emacs-w3m][GitHub emacs-w3m]]
#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :pin melpa
    :config
    (progn
      (setq w3m-coding-system 'utf-8
            w3m-file-coding-system 'utf-8
            w3m-file-name-coding-system 'utf-8
            w3m-input-coding-system 'utf-8
            w3m-output-coding-system 'utf-8
            ;; emacs-w3m will test the ImageMagick support for png32
            ;; and create files named "png32:-" everywhere
            w3m-imagick-convert-program nil
            w3m-terminal-coding-system 'utf-8
            w3m-use-cookies t
            w3m-cookie-accept-bad-cookies t
            w3m-home-page "http://www.google.com.hk/en"
            w3m-command-arguments       '("-F" "-cookie")
            w3m-mailto-url-function     'compose-mail
            browse-url-browser-function 'w3m
            ;; use shr to view html mail, but if libxml NOT available
            ;; use w3m isntead. That's macs 24.3+ default logic
            mm-text-html-renderer 'w3m ; I prefer w3m
            w3m-use-toolbar t
            ;; show images in the browser
            w3m-default-display-inline-images t
            ;; w3m-use-tab     nil
            w3m-confirm-leaving-secure-page nil
            w3m-search-default-engine "g"
            w3m-view-this-url-new-session-in-background t
            w3m-key-binding 'info)))

  (defun y/view-mode-func()
    (message "Set to view mode func")
    (define-key view-mode-map "n" 'next-line)
    (define-key view-mode-map "p" 'previous-line)

    (define-key view-mode-map "." 'ggtags-find-tag-dwim)
    (define-key view-mode-map "," 'pop-tag-mark)
    )

  (eval-after-load 'view-mode-hook #'y/view-mode-func)

  ;;(use-package emacs-w3m)
#+END_SRC

* Version control
** git
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

* Security
** local directory
#+BEGIN_SRC emacs-lisp
  ;; Both are builtin
  (require 'cc-mode)
  (require 'semantic)
  (require 'semantic/bovine/gcc)

  (defvar-local y/project-type nil
    "Current project type. Candidates are linux-kernel, nil")
  (defvar y/project--last-dir-local nil)
  (defvar y/project--buffer-changed nil)

  (defvar y/semantic-c-system-include-path nil
    "Default system include path for C.")

  (defvar y/semantic-c++-system-include-path nil
    "Default system include path for C++.")

  (defun y/semantic-set-default-include-path()
    "Set to default include path because dir-locals may changed it unexpectedly."
    (interactive)
    (setq-mode-local c-mode semantic-dependency-system-include-path
                     y/semantic-c-system-include-path)
    (setq-mode-local c++-mode semantic-dependency-system-include-path
                     y/semantic-c++-system-include-path))

  (defun y/semantic-refresh-system-include-path()
    "Refresh system include path. Almost you need not call directly."
    (interactive)
    (setq y/semantic-c-system-include-path
          (semantic-gcc-get-include-paths "c")
          y/semantic-c++-system-include-path
          (semantic-gcc-get-include-paths "c++")))

  (y/semantic-refresh-system-include-path)

  (defun y/project-set-default()
    "Set project to default."
    (y/semantic-set-default-include-path)
    ;; Always add current directory to c-dependency-include-path
    (let ((dl (locate-dominating-file default-directory
                                      dir-locals-file)))
      ;; (make-local-variable 'semantic-c-dependency-system-include-path)
      (setq dl `(,dl))
      (setq semantic-c-dependency-system-include-path dl)
      (setq semanticdb-project-roots dl)
      (setq-mode-local c-mode semantic-dependency-include-path dl)
      (setq-mode-local c++-mode semantic-dependency-include-path dl)

      ;; set c++ for c/c++ both
      (if (string= major-mode "c-mode")
          (setq dl (append dl y/semantic-c-system-include-path))
        (setq dl (append dl y/semantic-c++-system-include-path)))
      (setq flycheck-clang-include-path dl
            flycheck-clang-includes dl
            flycheck-gcc-include-path dl
            company-c-headers-path-system dl)))

  (defun y/whitespace-linux-kernel-style()
    "Linux kernel do not show tab color."
    (interactive)
    (when (and (equal y/project-type 'linux-kernel)
               (string= major-mode "c-mode"))
      (make-local-variable 'whitespace-display-mappings)
      (make-local-variable 'whitespace-style)
      (setq whitespace-display-mappings
            '((space-mark 32 [183] [46])
              (newline-mark 10 [182 10])))
      (setq whitespace-style
            '(face trailing spaces lines-tail newline
                   space-before-tab space-before-tab::tab
                   space-before-tab::space
                   space-after-tab::space space-after-tab
                   newline-mark space-mark tab-mark))
      ;; whitespace need re-enable to valid new style
      (whitespace-turn-off)
      (whitespace-turn-on)))

  (defun y/project-set-linux-kernel()
    "Set project to linux kernel."
    (interactive)
    (setq buffer-read-only t)
    (y/whitespace-linux-kernel-style)
    (let (dl (dir-local (locate-dominating-file default-directory
                                                dir-locals-file)))
      (when (and dir-local
                 (semantic-active-p))
          (progn
            (setq semanticdb-project-roots `(,dir-local))
            (setq dl `(,(concat dir-local "include/")
                       ,(concat dir-local "include/uapi")
                       ,(concat dir-local "arch/x86/include/")))
            (setq semantic-dependency-include-path dl)
            ;; (setq semantic-c-dependency-system-include-path dl)
            (setq-mode-local c-mode semantic-dependency-system-include-path dl)
            ;; (setq-mode-local c-mode semantic-c-dependency-system-include-path dl)
            (setq flycheck-clang-include-path dl
                  flycheck-clang-includes dl
                  flycheck-gcc-include-path dl
                  company-c-headers-path-system dl)))))

  (add-to-list 'safe-local-eval-forms '(y/project-set-linux-kernel))
  (add-to-list 'safe-local-variable-values '(y/project-type . linux-kernel))
  ;; (add-hook 'c-mode-common-hook
  ;;          #'y/semantic-set-default-include-path)

  ;; (put 'y/dir-local-c-include-path 'safe-local-eval-forms
  ;;  (lambda (x) t))

  (setq enable-dir-local-variables t
        enable-remote-dir-locals t
        enable-local-variables :safe
        enable-local-eval t)

  ;; After all, semantic-c-dependency-include-path and
  ;; semantic-dependency-include-path not work. Always use system directory
  ;; So always update system directory when buffer switched.
  (defun y/project-config-hook()
    "Change inlcude path when buffer switched."
    (unless (or (equal y/project--buffer-changed (current-buffer))
                (not (or (string= major-mode "c-mode")
                         (string= major-mode "c++-mode"))))
      ;; update buffer so next ignore for same buffer
      (setq y/project--buffer-changed (current-buffer))

      (let ((dir-local (locate-dominating-file default-directory
                                               dir-locals-file)))
        (unless (equal y/project--last-dir-local dir-local)
          ;; update dir-local so next ignore
          (setq y/project--last-dir-local dir-local)
          ;; Do real config
          )
        (cond ((equal y/project-type 'linux-kernel)
               (y/project-set-linux-kernel))
              (t
               (y/project-set-default))))))

  (add-hook 'post-command-hook #'y/project-config-hook)
  ;; (add-hook 'hack-local-variables-hook #'y/project-config-hook)
  ;; (add-hook 'buffer-list-update-hook #'y/project-config-hook)
#+END_SRC

* Project
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile)
#+END_SRC
* Daemon
#+BEGIN_SRC emacs-lisp
  (defun y/daemon-tcp()
    "Configure Emacs Daemon use TCP for remote supports."
    (when (daemonp)
      (setq server-use-tcp 1)
      (setq server-host "10.101.195.100")
      (setq server-port 9191)
      ;; must 64 chars!
      (setq server-auth-key "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYANYG")
      (message "Daemon TCP URI:%s:%d" server-host server-port)))
  ;; (y/daemon-tcp)
#+END_SRC

* Footer
Refer to [[#header][header]] for more details.

#+BEGIN_SRC emacs-lisp
  ;; calculate finish seconds and print
  (defconst y/time-finish-seconds (float-time))
  (message "y/time-elapsed-time is %.3f seconds (file: %s)"
           (- y/time-finish-seconds y/time-begin-seconds) user-init-config)

  (unintern 'y/time-finish-seconds nil)
  (unintern 'y/time-begin-seconds nil)

  ;;; footer timestamp message
  (message "%s" (format-time-string "config.el finish %Y-%m-%d %H:%M:%S"
                                    (current-time)))

  ;;; config.el ends here
#+END_SRC

* Appendix
Blank now.
